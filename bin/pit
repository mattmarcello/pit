#!/usr/bin/env python3

import os
import sys
from datetime import datetime
from pathlib import Path

sys.path.insert(0, "/Users/mpm/src/building_git")


from lib.workspace import Workspace
from lib.database import Database
from lib.entry import Entry
from lib.refs import Refs
from lib.index import Index
from lib.lockfile import Lockfile

arg = sys.argv[1]

rest = sys.argv[2:]


def init():

    path = os.path.join(os.getcwd(), rest[0]) if 0 < len(rest) else os.getcwd()

    git_path = path + "/.git"

    for dir in ["objects", "refs"]:
        path = git_path + "/" + dir
        try:
            os.makedirs(path)
        except OSError:
            if not os.path.isdir(path):
                sys.stderr.write("fatal: OSError")
                exit(1)

    print("initialized empty repository in: %s" % git_path)
    exit(0)


def add():

    root_path = os.getcwd()
    git_path = root_path + "/.git"
    db_path = git_path + "/objects"
    index_path = git_path + "/index"

    workspace = Workspace(root_path)
    database = Database(db_path)
    index = Index(Path(index_path))

    try:
        index.load_for_update()
        print("what the fuck")
    except Lockfile.LockDenied as e:
        sys.stderr.write(
            """fatal: %s 

Another pit process seems to be running in this repository.
Please make sure that all processes are terminated then try again.
If it still fails, a pit process may have crashed in this
respository earlier: remove the file manually to continue

"""
            % str(e)
        )
        sys.exit(128)

    for path in rest:

        fs = []
        try:
            for pathname in workspace.list_files(path):
                fs.append(pathname)
        except Workspace.MissingFile as e:
            sys.stderr.write("fatal: %s\n" % str(e))
            index.release_lock()
            sys.exit(128)

        try:
            for pathname in fs:
                data = workspace.read_file(pathname)
                stat = workspace.stat_file(pathname)

                blob = Database.Blob(data)
                database.store(blob)
                index.add(Path(pathname), blob.oid, stat)
        except Workspace.NoPermission as e:
            sys.stderr.write("error: %s\n" % str(e))
            sys.stderr.write("fatal: adding files failed\n")
            index.release_lock()
            sys.exit(128)

    index.write_updates()
    exit(0)


def commit():

    root_path = os.getcwd()
    git_path = root_path + "/.git"
    db_path = git_path + "/objects"

    database = Database(db_path)
    index = Index(os.path.join(git_path, "index"))
    refs = Refs(git_path)

    index.load()

    root = Database.Tree.build(index.get_entries())
    root.traverse(lambda obj: database.store(obj))

    parent = refs.read_head()
    name = os.environ["GIT_AUTHOR_NAME"]
    email = os.environ["GIT_AUTHOR_EMAIL"]
    author = Database.Author(name, email, datetime.now())
    message = sys.stdin.read()

    commit = Database.Commit(parent, root.oid, author, message)

    database.store(commit)
    refs.update_head(commit.oid)

    is_root = "(root-commit)" if parent is None else ""

    print("[%s %s] %s" % (is_root, commit.oid, message.splitlines()[0]))
    exit(0)


def error():
    sys.stderr.write("pit: '%s' is not a pit command." % arg)
    exit(1)


commands = {"init": init, "commit": commit, "add": add}

command = commands.get(arg, error)

command()
